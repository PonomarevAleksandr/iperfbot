import iperf3
import matplotlib.pyplot as plt
from aiogram.types import FSInputFile

async def run_iperf_test(ip: str, duration: int, format_type: int):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç iperf3 —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ –≥—Ä–∞—Ñ–∏–∫, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    client = iperf3.Client()
    client.duration = duration
    client.server_hostname = ip

    try:
        result = client.run()
        if result is None:
            return "–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä Iperf3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π IP."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}"

    data = result.json
    byte_transfer = []
    time_intervals = []

    for interval in data["intervals"]:
        start = round(interval["streams"][0]["start"])
        transfer = round(interval["streams"][0]["bytes"] / 1e6, 2)  # –í –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
        byte_transfer.append(transfer)
        time_intervals.append(start)

    if format_type == 1:
        return await generate_graph(time_intervals, byte_transfer)
    else:
        return generate_text_report(data)

async def generate_graph(time_intervals, byte_transfer):
    """
    –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏
    """
    plt.figure(figsize=(8, 4))
    plt.plot(time_intervals, byte_transfer, marker="o", linestyle="-", color="b")
    plt.xlabel("–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
    plt.ylabel("–ü–µ—Ä–µ–¥–∞–Ω–æ (MB)")
    plt.title("–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏")
    plt.grid()
    plt.savefig("speed_graph.png")
    plt.close()

    return FSInputFile("speed_graph.png")

def generate_text_report(data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º iperf3 —Ç–µ—Å—Ç–∞
    """
    text_results = ["üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:**"]
    for interval in data["intervals"]:
        start = round(interval["streams"][0]["start"])
        end = round(interval["streams"][0]["end"])
        transfer = round(interval["streams"][0]["bytes"] / 1e6, 2)
        bandwidth = round(interval["streams"][0]["bits_per_second"] / 8e6, 2)

        text_results.append(f"‚è≥ {start}-{end} —Å | üì¶ {transfer} MB | üöÄ {bandwidth} MB/s")

    return "\n".join(text_results)
