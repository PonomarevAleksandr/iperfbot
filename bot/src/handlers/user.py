from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from src.utils.func import run_iperf_test
from src.utils.keyboards import get_format_keyboard
from src.utils.fsm_state import IperfTest

router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ Iperf3.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")


@router.message(Command("play"))
async def play_handler(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", reply_markup=get_format_keyboard())
    await state.set_state(IperfTest.format_choice)


@router.message(IperfTest.format_choice)
async def format_choice_handler(message: types.Message, state: FSMContext):
    format_type = 1 if "–ì—Ä–∞—Ñ–∏–∫" in message.text else 2
    await state.update_data(format=format_type)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
    await state.set_state(IperfTest.duration)


@router.message(IperfTest.duration, F.text.regexp(r"^\d+$"))
async def duration_handler(message: types.Message, state: FSMContext):
    await state.update_data(duration=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞:")
    await state.set_state(IperfTest.ip_address)


@router.message(IperfTest.ip_address)
async def ip_address_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ip = message.text
    duration = user_data["duration"]
    format_type = user_data["format"]

    await message.answer(f"–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥... ‚è≥")

    result = await run_iperf_test(ip, duration, format_type)

    if isinstance(result, str):
        await message.answer(result, parse_mode="Markdown")
    else:
        await message.answer_photo(result)

    await state.clear()
